package swPro.source;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
 
시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
2 초	128 MB	7321	3228	2662	43.327%

▶ 문제
어떤 극장의 좌석은 한 줄로 되어 있으며 왼쪽부터 차례대로 1번부터 N번까지 번호가 매겨져 있다. 공연을 보러 온 사람들은 자기의 입장권에 표시되어 있는 좌석에 앉아야 한다. 예를 들어서, 입장권에 5번이 쓰여 있으면 5번 좌석에 앉아야 한다. 단, 자기의 바로 왼쪽 좌석 또는 바로 오른쪽 좌석으로는 자리를 옮길 수 있다. 예를 들어서, 7번 입장권을 가진 사람은 7번 좌석은 물론이고, 6번 좌석이나 8번 좌석에도 앉을 수 있다. 그러나 5번 좌석이나 9번 좌석에는 앉을 수 없다.
그런데 이 극장에는 “VIP 회원”들이 있다. 이 사람들은 반드시 자기 좌석에만 앉아야 하며 옆 좌석으로 자리를 옮길 수 없다.
오늘 공연은 입장권이 매진되어 1번 좌석부터 N번 좌석까지 모든 좌석이 다 팔렸다. VIP 회원들의 좌석 번호들이 주어졌을 때, 사람들이 좌석에 앉는 서로 다른 방법의 가짓수를 구하는 프로그램을 작성하시오.
예를 들어서, 그림과 같이 좌석이 9개이고, 4번 좌석과 7번 좌석이 VIP석인 경우에 <123456789>는 물론 가능한 배치이다. 또한 <213465789> 와 <132465798> 도 가능한 배치이다. 그러나 <312456789> 와 <123546789> 는 허용되지 않는 배치 방법이다.

▶ 입력
첫째 줄에는 좌석의 개수 N이 입력된다. N은 1 이상 40 이하이다. 둘째 줄에는 고정석의 개수 M이 입력된다. M은 0 이상 N 이하이다. 다음 M 개의 줄에는 고정석의 번호가 작은 수부터 큰 수의 순서로 한 줄에 하나씩 입력된다.

▶ 출력
주어진 조건을 만족하면서 사람들이 좌석에 앉을 수 있는 방법의 가짓수를 출력한다. 방법의 가짓수는 2,000,000,000을 넘지 않는다. (2,000,000,000 < 231-1)

 */

public class BJ_2302_Best {

	static int[] dp, vip, ans;
	static int sol = 1;

	public static void main(String[] args) throws Exception {
		BJ_2302_Best t = new BJ_2302_Best();
		long startTime = System.currentTimeMillis();
		/* ========================================= */
		// 알고리즘을 해당 쿼리 안에 넣어 작성한 알고리즘의 성능을 계산할 수 있다.

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	    //BufferedReader br = new BufferedReader(new FileReader("src/algorithm/sample_input.txt"));
	    
    	int N = Integer.parseInt(br.readLine()); //자리갯수
    	int M = Integer.parseInt(br.readLine()); //vip 좌석 갯수
	    
    	if (N < 3) {
    		dp = new int[4];
    	} else {
    		dp = new int[N+1];
    	}
    	
    	vip = new int[M];
    	ans = new int[M+1];
    	
    	for (int i=0; i<M ; i++) {
    		vip[i] = Integer.parseInt(br.readLine());
    	}
    	
    	dp[0] = 1;
    	dp[1] = 1;
    	dp[2] = 2;
    	
    	if (M > 0) {
    		ans[0] = calc(vip[0]-1);
    		for (int i=1; i<M; i++) {
    			ans[i] = calc(vip[i] - vip[i-1] - 1);
    		}
    		
    		ans[M] = calc(N - vip[M-1]);
    	} else {
    		ans[M] = calc(N);
    	}
    	
    	for (int a : ans) {
    		sol = sol * a;
    	}
    			
	    System.out.println(sol);
		
		/* ========================================= */
		long endTime = System.currentTimeMillis();
		//System.out.println("수행속도 : "+(endTime - startTime));
	    
	}
	
	private static int calc(int seat) {
		for (int i=3; i <= seat; i++) {
			dp[i] = dp[i-2] + dp[i-1];
		}
		
		return dp[seat];
	}

}
